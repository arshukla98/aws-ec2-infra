# Define the API version and kind of resource
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# Template metadata. Here's your intro to what this template does.
metadata:
  name: Create-AWS-EC2-Instance
  title: Creating Instance using Terraform and AWS
  description: AWS EC2 Instance using Terraform
# The specification for how the template behaves
spec:
  # Who owns this template. Generally, it could be a team or individual
  owner: user:arshukla98
  # The type of service this template deploys
  type: service
  # User-input parameters. Makes your templates dynamic!
  parameters:

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

    # Parameters for setting up the EC2
    - title: Basic EC2 Instance Configuration
      required:
        - instanceName
        - instanceImage
        - instanceType
        - region
      properties:
        instanceName:
          title: Instance Name
          type: string
          description: The Name of Instance

        instanceImage:
          title: Instance OS
          type: string
          description: The OS of Instance
          ui:autofocus: true
          enum:
            - ami-0e670eb768a5fc3d4
            - ami-03f4878755434977f
            - ami-0cbadfea5b91c0ce1
            - ami-05a5bb48beb785bf1
          enumNames:
            - "Amazon Linux 2023 AMI 64-bit (x86)"
            - "Ubuntu Server 22.04 LTS (HVM), SSD Volume Type"
            - "Microsoft Windows Server 2019 Base 64-bit (x86)"
            - "Red Hat Enterprise Linux 9 (HVM), SSD Volume Type 64-bit (x86)"

        instanceType:
          title: The Type of Instance
          type: string
          description: The Type of Instance
          ui:autofocus: true
          enum:
            - t2.micro
            - t2.small
            - t2.medium
            - t2.large
            - t3.micro
            - t3.small
            - t3.medium
            - t3.large

        region:
          title: AWS Region
          type: string
          description: The AWS region where the instance will be deployed
          enum:
            - ap-south-1
          enumNames:
            - "Mumbai"

        publicKey:
          title: SSH Public Key
          type: string
          description: Generated SSH Public key

  # Steps that the template will execute in order
  steps:
    # - id: register
    #   name: Register
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: https://${{ parameters.repoUrl | parseRepoUrl | pick('host') }}/${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}/blob/main
    #     catalogInfoPath: '/catalog-info.yaml'

    # Trigger a GitHub Action to set up the EKS cluster
    - id: github-action
      name: Trigger GitHub Action
      action: github:actions:dispatch
      input:
        workflowId: manage-ec2-instance.yml  # GitHub Action workflow ID
        #repoUrl: 'github.com?repo=<repo-name>&owner=<github-username>'
        repoUrl: "${{ parameters.repoUrl | parseRepoUrl | pick('host') }}?repo=${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}&owner=${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}"
        branchOrTagName: 'main'  # The branch to run this action on
        workflowInputs:
          instanceName: ${{ parameters.instanceName }}
          instanceImage: ${{ parameters.instanceImage }}
          instanceType: ${{ parameters.instanceType }}
          awsRegion: ${{ parameters.region }}
          publicKey: ${{ parameters.publicKey }}

  # output:
  #   links:
  #     - title: Open in catalog
  #       icon: catalog
  #       entityRef: https://${{ parameters.repoUrl | parseRepoUrl | pick('host') }}/${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}/blob/main/catalog-info.yaml
